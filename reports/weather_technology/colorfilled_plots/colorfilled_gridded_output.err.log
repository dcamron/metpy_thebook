Traceback (most recent call last):
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/kgoebber/miniconda3/envs/metpy_book/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Set attributes for plotting contours
cntr = declarative.ContourPlot()
cntr.data = ds
cntr.field = 'Pressure_reduced_to_MSL_msl'
cntr.level = None
cntr.time = date
cntr.contours = range(0, 2000, 4)
cntr.clabels = True
cntr.plot_units = 'hPa'
cntr.smooth_field = 4 # Smooth the contours

# Set attributes for plotting filled contours
cfill = declarative.FilledContourPlot()
cfill.data = ds
cfill.field = 'Temperature_height_above_ground'
cfill.level = 2 * units.m
cfill.time = date
cfill.contours = range(-38, 103, 2)
cfill.colormap = 'coolwarm'
cfill.colorbar = 'horizontal'
cfill.plot_units = 'degF'

# Set attributes for plotting wind barbs
barbs = declarative.BarbPlot()
barbs.data = ds
barbs.time = date
barbs.field = ['u-component_of_wind_height_above_ground',
               'v-component_of_wind_height_above_ground']
barbs.level = 10 * units.m
barbs.skip = (2, 2)
barbs.plot_units = 'knot'

# Set the attributes for the map
# and put the contours on the map
panel = declarative.MapPanel()
panel.area = [-125, -74, 22, 52]
panel.projection = 'lcc'
panel.layers = ['states', 'coastline', 'borders']
panel.left_title = f'MSLP (hPa), 2-m TMPF, 10-m Wind Barbs (kts)'
panel.right_title = f'Valid Time: {date:%d %B %Y %H UTC}'
panel.plots = [cntr, cfill, barbs]

# Set the attributes for the panel
# and put the panel in the figure
pc = declarative.PanelContainer()
pc.size = (15, 15)
pc.panels = [panel]

# Show the figure
pc.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
Cell [0;32mIn[3], line 50[0m
[1;32m     47[0m pc[38;5;241m.[39mpanels [38;5;241m=[39m [panel]
[1;32m     49[0m [38;5;66;03m# Show the figure[39;00m
[0;32m---> 50[0m [43mpc[49m[38;5;241;43m.[39;49m[43mshow[49m[43m([49m[43m)[49m

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:179[0m, in [0;36mPanelContainer.show[0;34m(self)[0m
[1;32m    177[0m [38;5;28;01mdef[39;00m [38;5;21mshow[39m([38;5;28mself[39m):
[1;32m    178[0m [38;5;250m    [39m[38;5;124;03m"""Show the constructed graphic on the screen."""[39;00m
[0;32m--> 179[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdraw[49m[43m([49m[43m)[49m
[1;32m    180[0m     plt[38;5;241m.[39mshow()

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:166[0m, in [0;36mPanelContainer.draw[0;34m(self)[0m
[1;32m    164[0m [38;5;28;01mfor[39;00m panel [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mpanels:
[1;32m    165[0m     [38;5;28;01mwith[39;00m panel[38;5;241m.[39mhold_trait_notifications():
[0;32m--> 166[0m         [43mpanel[49m[38;5;241;43m.[39;49m[43mdraw[49m[43m([49m[43m)[49m

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:461[0m, in [0;36mMapPanel.draw[0;34m(self)[0m
[1;32m    459[0m [38;5;28;01mfor[39;00m p [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mplots:
[1;32m    460[0m     [38;5;28;01mwith[39;00m p[38;5;241m.[39mhold_trait_notifications():
[0;32m--> 461[0m         [43mp[49m[38;5;241;43m.[39;49m[43mdraw[49m[43m([49m[43m)[49m
[1;32m    463[0m [38;5;66;03m# Add all of the maps[39;00m
[1;32m    464[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m([38;5;28mself[39m[38;5;241m.[39mlayers) [38;5;241m>[39m [38;5;28mlen[39m([38;5;28mself[39m[38;5;241m.[39mlayers_edgecolor):

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:826[0m, in [0;36mPlotScalar.draw[0;34m(self)[0m
[1;32m    824[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_need_redraw:
[1;32m    825[0m     [38;5;28;01mif[39;00m [38;5;28mgetattr[39m([38;5;28mself[39m, [38;5;124m'[39m[38;5;124mhandle[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m) [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 826[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_build[49m[43m([49m[43m)[49m
[1;32m    827[0m     [38;5;28;01mif[39;00m [38;5;28mgetattr[39m([38;5;28mself[39m, [38;5;124m'[39m[38;5;124mcolorbar[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m) [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    828[0m         cbar [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39max[38;5;241m.[39mfigure[38;5;241m.[39mcolorbar(
[1;32m    829[0m             [38;5;28mself[39m[38;5;241m.[39mhandle, orientation[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mcolorbar, pad[38;5;241m=[39m[38;5;241m0[39m, aspect[38;5;241m=[39m[38;5;241m50[39m)

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:994[0m, in [0;36mContourPlot._build[0;34m(self)[0m
[1;32m    992[0m [38;5;28;01mdef[39;00m [38;5;21m_build[39m([38;5;28mself[39m):
[1;32m    993[0m [38;5;250m    [39m[38;5;124;03m"""Build the plot by calling any plotting methods as necessary."""[39;00m
[0;32m--> 994[0m     x_like, y_like, imdata [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mplotdata[49m
[1;32m    996[0m     kwargs [38;5;241m=[39m plot_kwargs(imdata)
[1;32m    998[0m     [38;5;28mself[39m[38;5;241m.[39mhandle [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39max[38;5;241m.[39mcontour(x_like, y_like, imdata, [38;5;28mself[39m[38;5;241m.[39mcontours,
[1;32m    999[0m                                          colors[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mlinecolor, linewidths[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mlinewidth,
[1;32m   1000[0m                                          linestyles[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mlinestyle, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:810[0m, in [0;36mPlotScalar.plotdata[0;34m(self)[0m
[1;32m    804[0m [38;5;250m[39m[38;5;124;03m"""Return the data for plotting.[39;00m
[1;32m    805[0m 
[1;32m    806[0m [38;5;124;03mThe two dimension coordinates and the data array.[39;00m
[1;32m    807[0m 
[1;32m    808[0m [38;5;124;03m"""[39;00m
[1;32m    809[0m [38;5;28;01mtry[39;00m:
[0;32m--> 810[0m     plot_x_dim [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mgriddata[49m[38;5;241m.[39mmetpy[38;5;241m.[39mfind_axis_number([38;5;124m'[39m[38;5;124mx[39m[38;5;124m'[39m)
[1;32m    811[0m     plot_y_dim [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mgriddata[38;5;241m.[39mmetpy[38;5;241m.[39mfind_axis_number([38;5;124m'[39m[38;5;124my[39m[38;5;124m'[39m)
[1;32m    812[0m [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m:

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/plots/declarative.py:783[0m, in [0;36mPlotScalar.griddata[0;34m(self)[0m
[1;32m    781[0m [38;5;66;03m# Handle unit conversion (both direct unit specification and scaling)[39;00m
[1;32m    782[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mplot_units [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 783[0m     data_subset [38;5;241m=[39m [43mdata_subset[49m[38;5;241;43m.[39;49m[43mmetpy[49m[38;5;241;43m.[39;49m[43mconvert_units[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mplot_units[49m[43m)[49m
[1;32m    785[0m [38;5;66;03m# Handle smoothing of data[39;00m
[1;32m    786[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39msmooth_field [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/xarray.py:181[0m, in [0;36mMetPyDataArrayAccessor.convert_units[0;34m(self, units)[0m
[1;32m    167[0m [38;5;28;01mdef[39;00m [38;5;21mconvert_units[39m([38;5;28mself[39m, units):
[1;32m    168[0m [38;5;250m    [39m[38;5;124;03m"""Return new DataArray with values converted to different units.[39;00m
[1;32m    169[0m 
[1;32m    170[0m [38;5;124;03m    See Also[39;00m
[0;32m   (...)[0m
[1;32m    179[0m 
[1;32m    180[0m [38;5;124;03m    """[39;00m
[0;32m--> 181[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mquantify[49m[43m([49m[43m)[49m[38;5;241m.[39mcopy(data[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39munit_array[38;5;241m.[39mto(units))

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/metpy/xarray.py:231[0m, in [0;36mMetPyDataArrayAccessor.quantify[0;34m(self)[0m
[1;32m    221[0m [38;5;28;01mdef[39;00m [38;5;21mquantify[39m([38;5;28mself[39m):
[1;32m    222[0m [38;5;250m    [39m[38;5;124;03m"""Return a new DataArray with the data converted to a `pint.Quantity`.[39;00m
[1;32m    223[0m 
[1;32m    224[0m [38;5;124;03m    Notes[39;00m
[0;32m   (...)[0m
[1;32m    228[0m [38;5;124;03m    subsetting![39;00m
[1;32m    229[0m [38;5;124;03m    """[39;00m
[1;32m    230[0m     [38;5;28;01mif[39;00m (
[0;32m--> 231[0m         [38;5;129;01mnot[39;00m is_quantity([38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_data_array[49m[38;5;241;43m.[39;49m[43mdata[49m)
[1;32m    232[0m         [38;5;129;01mand[39;00m np[38;5;241m.[39missubdtype([38;5;28mself[39m[38;5;241m.[39m_data_array[38;5;241m.[39mdata[38;5;241m.[39mdtype, np[38;5;241m.[39mnumber)
[1;32m    233[0m     ):
[1;32m    234[0m         [38;5;66;03m# Only quantify if not already quantified and is quantifiable[39;00m
[1;32m    235[0m         quantified_dataarray [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_data_array[38;5;241m.[39mcopy(data[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39munit_array)
[1;32m    236[0m         [38;5;28;01mif[39;00m [38;5;124m'[39m[38;5;124munits[39m[38;5;124m'[39m [38;5;129;01min[39;00m quantified_dataarray[38;5;241m.[39mattrs:

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/dataarray.py:742[0m, in [0;36mDataArray.data[0;34m(self)[0m
[1;32m    730[0m [38;5;129m@property[39m
[1;32m    731[0m [38;5;28;01mdef[39;00m [38;5;21mdata[39m([38;5;28mself[39m) [38;5;241m-[39m[38;5;241m>[39m Any:
[1;32m    732[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    733[0m [38;5;124;03m    The DataArray's data as an array. The underlying array type[39;00m
[1;32m    734[0m [38;5;124;03m    (e.g. dask, sparse, pint) is preserved.[39;00m
[0;32m   (...)[0m
[1;32m    740[0m [38;5;124;03m    DataArray.values[39;00m
[1;32m    741[0m [38;5;124;03m    """[39;00m
[0;32m--> 742[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvariable[49m[38;5;241;43m.[39;49m[43mdata[49m

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/variable.py:427[0m, in [0;36mVariable.data[0;34m(self)[0m
[1;32m    425[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_data
[1;32m    426[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m([38;5;28mself[39m[38;5;241m.[39m_data, indexing[38;5;241m.[39mExplicitlyIndexed):
[0;32m--> 427[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_data[49m[38;5;241;43m.[39;49m[43mget_duck_array[49m[43m([49m[43m)[49m
[1;32m    428[0m [38;5;28;01melse[39;00m:
[1;32m    429[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mvalues

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/indexing.py:696[0m, in [0;36mMemoryCachedArray.get_duck_array[0;34m(self)[0m
[1;32m    695[0m [38;5;28;01mdef[39;00m [38;5;21mget_duck_array[39m([38;5;28mself[39m):
[0;32m--> 696[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_ensure_cached[49m[43m([49m[43m)[49m
[1;32m    697[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39marray[38;5;241m.[39mget_duck_array()

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/indexing.py:690[0m, in [0;36mMemoryCachedArray._ensure_cached[0;34m(self)[0m
[1;32m    689[0m [38;5;28;01mdef[39;00m [38;5;21m_ensure_cached[39m([38;5;28mself[39m):
[0;32m--> 690[0m     [38;5;28mself[39m[38;5;241m.[39marray [38;5;241m=[39m as_indexable([38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43marray[49m[38;5;241;43m.[39;49m[43mget_duck_array[49m[43m([49m[43m)[49m)

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/indexing.py:664[0m, in [0;36mCopyOnWriteArray.get_duck_array[0;34m(self)[0m
[1;32m    663[0m [38;5;28;01mdef[39;00m [38;5;21mget_duck_array[39m([38;5;28mself[39m):
[0;32m--> 664[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43marray[49m[38;5;241;43m.[39;49m[43mget_duck_array[49m[43m([49m[43m)[49m

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/indexing.py:551[0m, in [0;36mLazilyIndexedArray.get_duck_array[0;34m(self)[0m
[1;32m    550[0m [38;5;28;01mdef[39;00m [38;5;21mget_duck_array[39m([38;5;28mself[39m):
[0;32m--> 551[0m     array [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43marray[49m[43m[[49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mkey[49m[43m][49m
[1;32m    552[0m     [38;5;66;03m# self.array[self.key] is now a numpy array when[39;00m
[1;32m    553[0m     [38;5;66;03m# self.array is a BackendArray subclass[39;00m
[1;32m    554[0m     [38;5;66;03m# and self.key is BasicIndexer((slice(None, None, None),))[39;00m
[1;32m    555[0m     [38;5;66;03m# so we need the explicit check for ExplicitlyIndexed[39;00m
[1;32m    556[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(array, ExplicitlyIndexed):

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/backends/netCDF4_.py:100[0m, in [0;36mNetCDF4ArrayWrapper.__getitem__[0;34m(self, key)[0m
[1;32m     99[0m [38;5;28;01mdef[39;00m [38;5;21m__getitem__[39m([38;5;28mself[39m, key):
[0;32m--> 100[0m     [38;5;28;01mreturn[39;00m [43mindexing[49m[38;5;241;43m.[39;49m[43mexplicit_indexing_adapter[49m[43m([49m
[1;32m    101[0m [43m        [49m[43mkey[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mshape[49m[43m,[49m[43m [49m[43mindexing[49m[38;5;241;43m.[39;49m[43mIndexingSupport[49m[38;5;241;43m.[39;49m[43mOUTER[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_getitem[49m
[1;32m    102[0m [43m    [49m[43m)[49m

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/core/indexing.py:858[0m, in [0;36mexplicit_indexing_adapter[0;34m(key, shape, indexing_support, raw_indexing_method)[0m
[1;32m    836[0m [38;5;250m[39m[38;5;124;03m"""Support explicit indexing by delegating to a raw indexing method.[39;00m
[1;32m    837[0m 
[1;32m    838[0m [38;5;124;03mOuter and/or vectorized indexers are supported by indexing a second time[39;00m
[0;32m   (...)[0m
[1;32m    855[0m [38;5;124;03mIndexing result, in the form of a duck numpy-array.[39;00m
[1;32m    856[0m [38;5;124;03m"""[39;00m
[1;32m    857[0m raw_key, numpy_indices [38;5;241m=[39m decompose_indexer(key, shape, indexing_support)
[0;32m--> 858[0m result [38;5;241m=[39m [43mraw_indexing_method[49m[43m([49m[43mraw_key[49m[38;5;241;43m.[39;49m[43mtuple[49m[43m)[49m
[1;32m    859[0m [38;5;28;01mif[39;00m numpy_indices[38;5;241m.[39mtuple:
[1;32m    860[0m     [38;5;66;03m# index the loaded np.ndarray[39;00m
[1;32m    861[0m     result [38;5;241m=[39m NumpyIndexingAdapter(result)[numpy_indices]

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/backends/netCDF4_.py:113[0m, in [0;36mNetCDF4ArrayWrapper._getitem[0;34m(self, key)[0m
[1;32m    111[0m     [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39mdatastore[38;5;241m.[39mlock:
[1;32m    112[0m         original_array [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mget_array(needs_lock[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[0;32m--> 113[0m         array [38;5;241m=[39m [43mgetitem[49m[43m([49m[43moriginal_array[49m[43m,[49m[43m [49m[43mkey[49m[43m)[49m
[1;32m    114[0m [38;5;28;01mexcept[39;00m [38;5;167;01mIndexError[39;00m:
[1;32m    115[0m     [38;5;66;03m# Catch IndexError in netCDF4 and return a more informative[39;00m
[1;32m    116[0m     [38;5;66;03m# error message.  This is most often called when an unsorted[39;00m
[1;32m    117[0m     [38;5;66;03m# indexer is used before the data is loaded from disk.[39;00m
[1;32m    118[0m     msg [38;5;241m=[39m (
[1;32m    119[0m         [38;5;124m"[39m[38;5;124mThe indexing operation you are attempting to perform [39m[38;5;124m"[39m
[1;32m    120[0m         [38;5;124m"[39m[38;5;124mis not valid on netCDF4.Variable object. Try loading [39m[38;5;124m"[39m
[1;32m    121[0m         [38;5;124m"[39m[38;5;124myour data into memory first by calling .load().[39m[38;5;124m"[39m
[1;32m    122[0m     )

File [0;32m~/miniconda3/envs/metpy_book/lib/python3.11/site-packages/xarray/backends/common.py:151[0m, in [0;36mrobust_getitem[0;34m(array, key, catch, max_retries, initial_delay)[0m
[1;32m    149[0m [38;5;28;01mfor[39;00m n [38;5;129;01min[39;00m [38;5;28mrange[39m(max_retries [38;5;241m+[39m [38;5;241m1[39m):
[1;32m    150[0m     [38;5;28;01mtry[39;00m:
[0;32m--> 151[0m         [38;5;28;01mreturn[39;00m [43marray[49m[43m[[49m[43mkey[49m[43m][49m
[1;32m    152[0m     [38;5;28;01mexcept[39;00m catch:
[1;32m    153[0m         [38;5;28;01mif[39;00m n [38;5;241m==[39m max_retries:

File [0;32msrc/netCDF4/_netCDF4.pyx:4958[0m, in [0;36mnetCDF4._netCDF4.Variable.__getitem__[0;34m()[0m

File [0;32msrc/netCDF4/_netCDF4.pyx:5916[0m, in [0;36mnetCDF4._netCDF4.Variable._get[0;34m()[0m

File [0;32msrc/netCDF4/_netCDF4.pyx:2029[0m, in [0;36mnetCDF4._netCDF4._ensure_nc_success[0;34m()[0m

[0;31mRuntimeError[0m: NetCDF: DAP failure

